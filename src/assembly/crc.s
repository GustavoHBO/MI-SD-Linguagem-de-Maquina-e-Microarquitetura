####################################################################################################
#				Documentação - README
#
#	Registradores:
#		r8  - Aponta para o topo da pilha.
#		r16 - Armazena a mensagem atual a ser utilizada no cálculo do CRC
#		r17 - Buffer de entrada das novas mensagens
#		r18 - Armazena o polinômio de calculo do CRC
#		r19 - Armazena o bit para identificação de necessidade de carry
#		r20 - Armazena a quantidade de bits que ainda precisam ser calculados(Tamanho da mensagem - 32 + tamanho do polinômio do CRC)
#		r21 - Armazena a quantidade de bits do polinômio.
#		r22 - Armazena a quantidade de bits lidos do buffer
#		r23 - Aponta para o endereço de memória a ser lido
#
###################################################################################################


.data
	# Mensagem de 1000 bytes armazenada.
	.byte 0xb1, 0xf6, 0x2c, 0xc8, 0xd6, 0xfc, 0xfd, 0xb7, 0x3f, 0x60, 0xd1, 0xda, 0xb0, 0x47, 0x3e, 0xd6, 0xb2, 0xad, 0x9e, 0x44, 0x71, 0xe1, 0x78, 0x90, 0x88, 0xa9, 0xf3, 0x70, 0x17, 0x10, 0x66, 0x02, 0xc7, 0xf0, 0x6f, 0x48, 0x4b, 0x6d, 0xe9, 0x53, 0x36, 0x13, 0xcf, 0x42, 0xa8, 0xc5, 0x11, 0x12, 0x33, 0x54, 0x93, 0xbd, 0x69, 0x65, 0xd7, 0x02, 0x2d, 0x28, 0x0c, 0xba, 0xd1, 0xdd, 0xb2, 0x43, 0x34, 0xa0, 0xa5, 0xb0, 0x30, 0xa7, 0xaa, 0xbd, 0x1b, 0x03, 0x07, 0x3d, 0xcd, 0xcc, 0xb0, 0x0c, 0x08, 0x9c, 0x46, 0x81, 0xd2, 0x9e, 0x3a, 0x13, 0x53, 0x95, 0xa2, 0x6c, 0xec, 0xdb, 0x69, 0x3e, 0x14, 0xec, 0xb5, 0x4e, 0x42, 0xba, 0xf2, 0x34, 0x3b, 0xdd, 0xf1, 0xed, 0x78, 0xc4, 0xbb, 0x7b, 0x1b, 0x3c, 0x48, 0x30, 0x12, 0xdb, 0x30, 0xc6, 0x1c, 0x6f, 0x44, 0xcb, 0x53, 0xab, 0x68, 0xbd, 0xe3, 0x27, 0xd3, 0xb2, 0xff, 0xee, 0xe0, 0xd5, 0xde, 0x0b, 0x84, 0x4b, 0x96, 0xe3, 0x43, 0x13, 0x02, 0xe2, 0x14, 0x9c, 0x9a, 0x8b, 0x97, 0x26, 0x03, 0xcd, 0x1d, 0x14, 0x61, 0xb9, 0x9d, 0xe3, 0xd2, 0xc7, 0xf6, 0xb8, 0x49, 0xbb, 0x66, 0xa5, 0x44, 0x2e, 0x8c, 0xb8, 0x8f, 0x57, 0xe4, 0x31, 0x92, 0x50, 0xdf, 0x02, 0xa3, 0x34, 0xa0, 0x3f, 0x73, 0x14, 0xd1, 0x22, 0x1e, 0xd7, 0x50, 0xea, 0xf3, 0x16, 0x93, 0xb2, 0x57, 0x9e, 0x34, 0x11, 0xfe, 0x17, 0x04, 0x74, 0x7c, 0xbd, 0x3b, 0x12, 0x8e, 0xc3, 0xfb, 0xf2, 0xa5, 0x24, 0xf0, 0x5c, 0x72, 0x21, 0xbb, 0xb3, 0xf6, 0x50, 0x53, 0x7f, 0xb8, 0xac, 0xb7, 0x6a, 0x69, 0x88, 0xf4, 0x0c, 0x47, 0xfb, 0x3a, 0x14, 0xc1, 0xa6, 0x75, 0x18, 0x06, 0x40, 0x5c, 0x5c, 0xc4, 0xd9, 0x3e, 0x36, 0x66, 0xd7, 0x00, 0xaa, 0x42, 0xb2, 0x8f, 0xdc, 0x34, 0x4b, 0x25, 0x58, 0x10, 0x89, 0x6c, 0x57, 0x3a, 0xb1, 0x8b, 0x8f, 0x76, 0xbc, 0x1b, 0xa8, 0x80, 0xc8, 0xe3, 0x1e, 0x5c, 0x8c, 0xb5, 0xe2, 0xbd, 0x0e, 0x4a, 0xa0, 0xb8, 0xb4, 0xc9, 0x5c, 0xef, 0x62, 0xfb, 0x69, 0xa9, 0x85, 0x52, 0xb4, 0x5e, 0x06, 0x1f, 0xb3, 0xa8, 0x7f, 0xa5, 0xf1, 0x22, 0x02, 0x0a, 0xbf, 0xd9, 0xc8, 0x43, 0x9c, 0xd5, 0x92, 0x13, 0x67, 0x01, 0xda, 0x6b, 0x45, 0xe3, 0x69, 0xba, 0x34, 0xcb, 0xa4, 0x4a, 0xb7, 0x3d, 0x6d, 0x90, 0x56, 0x89, 0xc6, 0xce, 0xf2, 0x97, 0xf4, 0x02, 0x74, 0xd4, 0xef, 0x5d, 0xe7, 0xc6, 0xb2, 0x6c, 0xd2, 0xc7, 0xf2, 0x8f, 0x2f, 0x52, 0x4a, 0x5a, 0x34, 0x1e, 0x5a, 0xd1, 0xc2, 0xc6, 0x8f, 0x4e, 0xcc, 0x14, 0xb2, 0x27, 0xdc, 0xa4, 0x0f, 0x95, 0x55, 0x00, 0x72, 0x76, 0xc7, 0xf2, 0x93, 0xd9, 0x63, 0x42, 0x16, 0xdc, 0x1a, 0x45, 0x7d, 0xc6, 0x26, 0xd6, 0xd4, 0x91, 0xf0, 0x41, 0xbf, 0x11, 0xc1, 0x24, 0x8b, 0x3b, 0x6c, 0x94, 0x0b, 0x4d, 0xa7, 0xf2, 0xde, 0xef, 0x22, 0x3b, 0x3d, 0x10, 0x43, 0xf2, 0x89, 0x01, 0x39, 0xe3, 0x39, 0x76, 0xf1, 0x50, 0xb3, 0x20, 0xe8, 0xa6, 0xf9, 0xc3, 0xea, 0xa7, 0x2c, 0x84, 0x21, 0x04, 0xa7, 0x30, 0x06, 0x39, 0xe9, 0xd8, 0x5e, 0xb1, 0xea, 0x50, 0xc0, 0xf7, 0xa3, 0x44, 0x9f, 0x9f, 0x12, 0x1c, 0x40, 0xce, 0xe0, 0xcf, 0x43, 0xd6, 0x05, 0x77, 0x14, 0xb3, 0x56, 0x4a, 0xcd, 0xea, 0x0c, 0x7c, 0xb9, 0xe8, 0x3e, 0xad, 0x18, 0xb9, 0xb6, 0x0f, 0x3e, 0x48, 0x75, 0xe6, 0xbd, 0xc7, 0xd4, 0x14, 0x67, 0x4a, 0xed, 0xaa, 0x63, 0x6a, 0x94, 0x8b, 0xb9, 0xa9, 0x39, 0xf7, 0xa4, 0xc1, 0xbf, 0x35, 0xff, 0x24, 0xc2, 0x5f, 0x10, 0x94, 0xe0, 0xfc, 0xc3, 0x2c, 0xbe, 0x14, 0xf9, 0x93, 0x35, 0x48, 0x17, 0x95, 0xbf, 0x41, 0xad, 0xdc, 0xde, 0x33, 0xc9, 0x70, 0x62, 0xff, 0xf4, 0xd0, 0xa6, 0x5f, 0x10, 0xaf, 0x7a, 0x02, 0x4c, 0x83, 0x94, 0x64, 0x13, 0xd1, 0x09, 0xaf, 0xdc, 0xb9, 0x87, 0xac, 0x00, 0x21, 0xdd, 0xaa, 0xbe, 0x5b, 0x38, 0xe6, 0xd0, 0x61, 0xce, 0x0b, 0x00, 0xab, 0xd9, 0x2d, 0xe0, 0x02, 0x30, 0xb5, 0x41, 0x62, 0x89, 0x0c, 0x4f, 0xc5, 0x06, 0x31, 0xef, 0x5b, 0x5a, 0x36, 0xcf, 0x1f, 0xb0, 0xaf, 0x12, 0xaa, 0xd6, 0x17, 0xfb, 0x52, 0xe0, 0xda, 0x9c, 0x38, 0xb0, 0x2e, 0x81, 0x7d, 0xd6, 0x64, 0x07, 0x76, 0x96, 0x22, 0x75, 0x7a, 0xfb, 0xf9, 0x26, 0x31, 0x62, 0xca, 0x41, 0x5e, 0xca, 0x95, 0x45, 0x46, 0x9b, 0x4d, 0x4a, 0x72, 0x73, 0x23, 0xbb, 0xe2, 0x40, 0xc0, 0x84, 0x91, 0x29, 0xc0, 0xf3, 0xdb, 0xa0, 0x98, 0xb5, 0x25, 0x8e, 0x59, 0x6f, 0xd3, 0x9d, 0x17, 0xae, 0x37, 0x9d, 0x36, 0x60, 0x04, 0x1e, 0x55, 0xee, 0xee, 0x65, 0xa8, 0x71, 0xc0, 0x8a, 0x40, 0x65, 0xad, 0x1d, 0x45, 0x55, 0x80, 0x45, 0x2f, 0x10, 0x53, 0xef, 0x10, 0xce, 0xfa, 0x9b, 0x7b, 0x4e, 0xf7, 0xa2, 0xa0, 0x13, 0xcd, 0x35, 0x50, 0x7b, 0x5d, 0xe9, 0x66, 0xfe, 0x3d, 0x3b, 0xbb, 0x28, 0x71, 0x9d, 0x6c, 0x34, 0x10, 0x60, 0xf7, 0x5e, 0xb8, 0x99, 0x03, 0xe1, 0x2c, 0xff, 0x32, 0x9d, 0x1b, 0x44, 0x58, 0x2d, 0x41, 0x74, 0x11, 0x28, 0x32, 0xc5, 0x42, 0x2b, 0x4e, 0x7c, 0x5e, 0xe8, 0x74, 0x61, 0x8f, 0x6a, 0xb2, 0x0b, 0xf4, 0x3b, 0xe4, 0x86, 0x04, 0xb4, 0x1e, 0x2c, 0x0c, 0x95, 0x69, 0xcf, 0x20, 0xf4, 0xf5, 0x74, 0x55, 0x8d, 0x23, 0x89, 0x2c, 0x83, 0xe3, 0x95, 0x83, 0xdb, 0x64, 0xe7, 0xfc, 0x4c, 0x7b, 0x62, 0x93, 0x2c, 0xa1, 0x4b, 0x35, 0xb9, 0x71, 0xca, 0xaf, 0xd6, 0xc5, 0xd5, 0x50, 0x37, 0xe3, 0xdb, 0x2f, 0x94, 0x90, 0xf5, 0x22, 0xbc, 0xf5, 0x5f, 0x28, 0xaf, 0x55, 0xab, 0xa3, 0xfe, 0x32, 0xea, 0x20, 0x23, 0xd7, 0xab, 0x41, 0x10, 0x60, 0xb5, 0x92, 0xb3, 0xd2, 0x4c, 0x94, 0x9b, 0x91, 0x80, 0x52, 0xcf, 0xc2, 0xa1, 0xd1, 0x9d, 0x7e, 0x24, 0x3a, 0x83, 0x94, 0xa2, 0x8a, 0x61, 0xdb, 0x89, 0x74, 0x46, 0x06, 0xb7, 0x71, 0x42, 0xa2, 0x8b, 0xe2, 0xa2, 0xd9, 0xc1, 0x4f, 0x61, 0x11, 0x60, 0xe5, 0x68, 0x8a, 0xf0, 0xdd, 0x07, 0x58, 0xdc, 0xd0, 0x43, 0x36, 0xb1, 0x98, 0xb4, 0x84, 0x25, 0x5e, 0xe4, 0x22, 0xe1, 0x5f, 0x29, 0x79, 0x7c, 0x56, 0xd2, 0x8d, 0x5b, 0xb5, 0x15, 0x80, 0x6b, 0x7e, 0x9f, 0xb7, 0x19, 0x7c, 0x37, 0x7a, 0x1a, 0xf1, 0x31, 0xfb, 0xe4, 0x5a, 0x1c, 0x95, 0x02, 0x0b, 0x7c, 0x2c, 0x26, 0x01, 0x66, 0x68, 0x0f, 0x05, 0xbc, 0x70, 0x3c, 0x25, 0x12, 0x9e, 0x34, 0x87, 0xc5, 0x8f, 0xac, 0xb9, 0x3b, 0x99, 0x62, 0x17, 0x76, 0xf0, 0x72, 0x8a, 0x9f, 0x4d, 0x09, 0xef, 0x33, 0xac, 0x53, 0x36, 0xec, 0x20, 0x2a, 0x45, 0x2b, 0xf0, 0x5c, 0xaf, 0x97, 0x2a, 0xbb, 0x27, 0x82, 0x61, 0x9c, 0x59, 0x7c, 0x9b, 0xd1, 0xae, 0x0b, 0x42, 0x2f, 0x17, 0x8c, 0xf9, 0x60, 0x3e, 0x46, 0xa6, 0xd4, 0x2a, 0x3a, 0x22, 0x71, 0xac, 0x28, 0xee, 0x99, 0x03, 0x59, 0x3a, 0xbc, 0x1b, 0xc8, 0x6c, 0xab, 0x7d, 0xca, 0x86, 0x40, 0xbd, 0xfc, 0x23, 0x26, 0xa4, 0xde, 0x96, 0x56, 0xd5, 0x9a, 0xe4, 0x65, 0x00, 0x1d, 0x58, 0xd8, 0xb2, 0xd8, 0x0c, 0x43, 0x03, 0x9c, 0x9d, 0x9e, 0x9f
	# .byte 0x1

		# Declaração dos valores a serem utilizados
	
	# Definindo o topo da pilha
	addi r8, r0, 0x3FF80

	# Definindo o polinômio, colocando-o no registador r18
	movia r18, 0x04C11DB7
	
	# Utilizado para identificar se o primeiro bit é 1
	movhi r19, 0b1000000000000000 
	
	# Define a quantidade de bits que ainda precisam ser calculados(Tamanho da mensagem - 32 + tamanho do polinômio do CRC)
	addi r20, r0, 8000
	
	# Define a quantidade de bits do polinômio
	addi r21, r0, 32
	
	# Carrega os registradores de mensagem e buffer a partir da memória.
	
	movia r23, 0x30000 # Define o endereço inicial de leitura.
	addi r22, r0, 32 # Define o buffer com tamanho 32.
	
	ldw r16, 0(r23)
	addi r23, r23, 4
	ldw r17, 0(r23)
.text

__main:
	call __calcularCRC32

__calcularCRC32:
	
	bgtu r0, r20, __fim # Verifica se ainda existe mensagem a ser calculada. Caso r0 seja maior que r20.
	call __prepararMensagem # Chama o procedimento para deslocar os bit's se necessário.
	xor r16, r16, r18 # Executa o XOR da mensagem com o polinômio.
	br __calcularCRC32 # Chama novamente o procedimento de calcular CRC32.
	
__prepararMensagem:
	bgeu r19, r16, __deslocarBit # Verifica se o bit mais significativo da mensagem é 0. Caso r19 seja maior ou igual a r16.
	stw r31, 0(r8)
	addi r8, r8, 4 # Incrementa o ponteiro para o topo da pilha.
	call __deslocarBit
	subi r8, r8, 4 # Decrementa o ponteiro para o topo da pilha.
	ldw r31, 0(r8)
	ret
	
__deslocarBit:
	slli r16, r16, 1 # Desloca um bit para a esquerda.
	subi r20, r20, 1 # Decrementa a quantidade de bit's a serem lidos.
	bgeu r20, r21, __deslocarBuffer # Verifica se os bit's a serem deslocados são da mensagem ou do polinômio.
	br __prepararMensagem

__deslocarBuffer:
	bgeu r0, r22, __carregarMensagem # Verifica se ainda tem mensagens a serem lidas no buffer. Caso r0 seja maior ou igual a r22.
	bgtu r19, r17, __deslocarBitUm # Verifica se o bit a ser deslocado é 1 ou 0. Caso r19 seja maior que r17.
	addi r16, r16, 1
	slli r17, r17, 1 # Desloca para a esquerda um bit de r17.
	subi r22, r22, 1 # Decrementa em um bit a quantidade de bit's a serem lidos do buffer.
	br __prepararMensagem

__deslocarUmBit:
	slli r17, r17, 1 # Desloca para a esquerda um bit de r17.
	subi r22, r22, 1 # Decrementa em um bit a quantidade de bit's a serem lidos do buffer.
	br __prepararMensagem

__carregarMensagem:
	sub r20, r20, r22 # Decrementa a quantidade de bits do buffer.
	addi r23, r23, 4 # Incrementa a posição de leitura dos próximos bytes a serem recuperados da memória.
	ldw r17, 0(r23) # Ler da memória os 32 bit's.
	bleu r20, r21, __quantidadeBitLer # Verifica se a quantidade de bit's a serem lidos na memória é menor que 32.
	add r22, r0, 32 # Quantidade de bit's recuperados da memória.
	br __deslocarBuffer # Vai para o conjunto de instruções de deslocar bit's do buffer.

__quantidadeBitLer:
	mov r22, r20
	br __deslocarBuffer # Vai para o conjunto de instruções de deslocar bit's do buffer. 
